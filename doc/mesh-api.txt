BlueZ D-Bus Mesh API description
***********************************

Mesh Network Hierarchy
rev-4.3
======================
Service		org.bluez.mesh
Interface	org.bluez.mesh.Network
Object path	/org/bluez/mesh

Methods:
		uint64 Join(object provision_agent, array{string} capabilities,
							array{string} capabilities,
							array{byte}[16] uuid,
							array{string} oob_info, // can be empty if oob data is not available
							uint32 URI_hash, //zero if does not exist
							array{byte} composition)

			This is the first step an application to become a node on a mesh
			network.

			The provision_agent parameter is the object that implements
			org.bluez.mesh.ProvisionAgent interface.

			The capabilities parameter is an array of strings with the following
			allowed values:
			"Blink", "Beep", "Vibrate", "OutNumeric", "OutAlpha", "Push",
			"Twist", "InNumeric", "InAlpha", "PublicOOB", "StaticOOB"

			The UUID parameter is a 32-character string that contains
			Device UUID.

			The composition parameter is a structurebyte array whose layout
			follows that of the composition data as defined by Mesh Profile
			specification.

			In case of success, the method returns a 64-bit token. The token
			must be preserved by the application in order to authenticate itself
			to the mesh daemon and attach to the network as a mesh node or
			permanently remove the identity of the mesh node.

			After the successful completion of this method, the application
			should call Attach() method to obtain access to mesh network.
			The meshd daemon retains persistent information about the node
			identified by the token.

			PossibleErrors:
				org.bluez.mesh.Error.Failed,
				org.bluez.mesh.Error.Canceled,
				org.bluez.mesh.Error.InvalidArguments
				org.bluez.mesh.Error.Timeout

		(object, unicast) Attach(object application, uint64 token)

			This is the first method that an application must call to obtain
			access to mesh node functionalities. The meshd daemon verifies
			whether the application is authorized to use this mesh node based
			on the value of the 64-bit token, which has been assigned to the
			application when it first joined mesh network.

			The application parameter is an object path to the application that
			implements org.bluez.mesh.Access interface (see Mesh Application
			hierarchy section) and may also implement org.bluez.mesh.Attention
			interface.

			The token parameter is a 64-bit number that has been obtained
			as a result of successful Join() method call.

			In case of success, the method call returns mesh node object (see
			Mesh Node Hierarchy section), and the unicast address of the primary
			(first) element.

			PossibleErrors:
				org.bluez.mesh.Error.DoesNotExist,
				org.bluez.mesh.Error.Failed

		void Leave(uint64 token)

			This removes the configuration information about the mesh node
			identified by the 64-bit token parameter. The token parameter
			has been obtained as a result of successful Join() method call.

			PossibleErrors:
				org.bluez.Error.DoesNotExist

Mesh Node Hierarchy
===================

Service		org.bluez.mesh
Interface	org.bluez.mesh.Node
Object path	/org/bluez/mesh/node_<xxxx>/
		where xxxx is a 4-digit hexadecimal number generated by meshd daemon

Methods:

		void Send(uint16 element, uint16 destination, uint16 key_index,
								array{byte} data)

			This method is used to send a message originated by a local model.

			The element parameter is the unicast address of a valid element on
			this node.

			The destination parameter contains the destination address. This
			destination must be a uint16 to a unicast address, or a well known
			group address.

			The key_index parameter determines which application key to use for
			encrypting the message. The key_index must be valid for that
			element, i.e., the application key must be bound to a model on this
			element. Otherwise, org.bluez.mesh.Error.NotAuthorized will be
			returned.

			The data parameter is an outgoing message to be encypted by the
			meshd daemon and sent on.

			Possible errors:
				org.bluez.mesh.Error.NotAuthorized
				org.bluez.mesh.Error.InvalidArguments

		void Publish(uint16 element, uint16 model, array{byte} data)

			This method is used to send a publication originated by a local
			model. If the model does not exist, or it has no publication record,
			the method returns org.bluez.mesh.Error.DoesNotExist error.

			The element parameter is the unicast address of a valid element
			that hosts the model.

			The model parameter contains a model ID, as defined by the
			Bluetooth SIG.

			Since only one Publish record may exist per element-model, the
			destination and key_index are obtained from the Publication
			record cached by the meshd daemon.

			Possible errors:
				org.bluez.mesh.Error.DoesNotExist
				org.bluez.mesh.Error.InvalidArguments


		void VendorPublish(uint16 element, uint32 vendor_model, array{byte} data)

			This method is used to send a publication originated by a local
			vendor model. If the model does not exist, or it has no publication
			record, the method returns org.bluez.mesh.Error.DoesNotExist error.

			The element parameter is the unicast address of the element that
			hosts the model.

			The vendor_model parameter contains a model ID, as defined by the
			vendor.

			Because only one Publish record may exist per element-model, the
			destination and key_index are obtained from the Publication
			record cached by the Mesh Daemon.

			Possible errors:
				org.bluez.mesh.Error.DoesNotExist
				org.bluez.mesh.Error.InvalidArguments


Properties	dict Features [read-only]

			The following keys are defined:
					uint16 Friend
					uint16 LowPower
					uint16 Proxy
					uint16 Beaconing
			with following  enumerated values:
					0 - feature is disabled
					1 - feature is enabled
					2 - feature is unsupported

			array{(uint16, array{uint16, dict}, array{uint32, dict))} Configuration

			Configuration is an array of structures where each array entry
			corresponds to an element and contains the following pair:
				uint16 unicast,
				array{uint16 model_id, dict config} sig_models
				array{uint32 model_id, dict config} vendor_models

				Either sig_models or vendor_models arrays may be zero length

				For the model configuration dictionary the following keys
				are defined:
				array{uint16} Bindings : Indices of application keys bound to
									the model
				array{uint16} Subscriptions: An array of unicast and/or group
									addresses
				array{string} VirtualSubscriptions : An array of 32-character
									ascii-hex strings representing virtual
									label UUIDs
				uint16 PublicationPeriod : Model publication period

		uint32 SecondsSinceLastHeard [read-only]


Mesh Application Hierarchy
==========================
Service		unique name
Interface	org.bluez.mesh.Access
Object path	freely definable

Methods:

		void MessageReceived(uint16 dest, uint16 source, uint16 key_index,
									array{byte} data)

			This method is called by meshd daemon when a message arrives
			addressed to the application.

			The dest parameter indicates the receipient's unicast address
			or subscription group address.

			The source parameter is unicast address of the remote node-element
			that sent the message.

			The key_index parameter indicates which application key has been
			used to decode the incoming message. The same key_index should be
			used by the application when sending a response to this message
			(in case a response is expected).

			The data parameter is the incoming message.

			void MessageReceivedVirtual(string dest, uint16 source, uint16 key_index,
									array{byte} data)

			This method is called by meshd daemon when a message arrives
			addressed to the application.

			The dest parameter contains a 32-character ascii-hex string
			representing subsciption virtual label UUID.

			The source parameter is unicast address of the remote node-element
			that sent the message.

			The key_index parameter indicates which application key has been
			used to decode the incoming message. The same key_index should be
			used by the application when sending a response to this message
			(in case a response is expected).

			The data parameter is the incoming message.

Service		unique name
Interface	org.bluez.mesh.Attention
Object path	freely definable

This is an optional interface that implements health attention timer.

Methods:
		void SetTimer(uint16 element,  uint16 time)

			The element parameter is the unicast address within the node
			where the health server model is hosted.

			The time parameter indicates how many seconds the attention state
			shall be on.

			PossibleErrors:
				org.bluez.mesh.Error.NotSupported

		uint16 GetTimer(uint16 element)

			The element parameter is the unicast address within the node
			where the health server model is hosted.

			Returns the number of seconds for how long the attention action
			remains staying on.

			PossibleErrors:
				org.bluez.mesh.Error.NotSupported


Provisioning Agent Hierarchy
============================
Service		unique name
Interface	org.bluez.mesh.ProvisionAgent
Object path	freely definable

Methods:
		array{byte} PrivateKey()

			This method is called during provisioning if the Provisioner
			has requested Out-Of-Band ECC key exchange. The Private key
			is returned to the Daemon, and the Public Key is delivered to
			the remote Provisioner using a method that does not involve
			the Bluetooth Mesh system. The Private Key returned must be 
			32 octets in size, or the Provisioning procedure will fail
			and be canceled.

			This function will only be called if the Provisioner has
			requested pre-determined keys to be exchanged Out-of-Band,
			and the local role is Unprovisioned device.

		array{byte} PublicKey()

			This method is called during provisioning if the local device
			is the Provisioner, and is requestng Out-Of-Band ECC key
			exchange. The Public key is returned to the Daemon
			that is the matched pair of the Private key of the remote
			device. The Public Key returned must be 64 octets in
			size, or the Provisioning procedure will fail and be canceled.

			This function will only be called if the Provisioner has
			requested pre-determined keys to be exchanged Out-of-Band,
			and the local role is Provisioner.

		void DisplayString(string display)
			This method is called when the Daemon has something important
			for the Agent to Display, but does not require any additional
			input locally. For instance: "Enter "ABCDE" on remote device".

		void DisplayNumeric(uint8 type, uint32 number)

			This method is called when the Daemon has something important
			for the Agent to Display, but does not require any additional
			input locally. For instance: "Enter 149264 on remote device".

			The type parameter indicates the display method. An enumeration
			of "Blink", "Beep", "Vibrate", or "OutNumeric".

			The number parameter is the specific value represented by
			the Prompt.

		uint32 PromptNumeric(uint8 type)

			This method is called when the Daemon has requires the user to
			enter a 1-9 digit decimal value.

			The type parameter indicates the input method. An enumeration
			of "Push", "Twist", or "InNumeric".

			This agent should prompt the user for specific input. For instance:
			"Enter value being displayed by remote device".

		array{byte} PromptStatic(uint8 type)

			This method is called when the Daemon requires a 16 octet
			byte array, as an Out-of-Band authentication.

			The type parameter indicates the input method. An enumeration
			of "Static", or "InAlpha".

			The Static data returned must be 16 octets in size, or the
			Provisioning procedure will fail and be canceled. If input is
			an InAlpha String, the printable charactors should be left
			justified, with trailing 0x00 octets filling the remaining bytes.

		void Cancel()

			This method gets called by the daemon to cancel any existing
			Agent Requests. When called, any pending user input should be
			canceled.


Mesh Provisioner Hierarchy
==========================
<TBD>
